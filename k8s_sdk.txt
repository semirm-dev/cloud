-- k8s operators

control loop
- software that tracks state of resource
- reconciliation loop: want x state -> check x state on cluster -> sync state

crd
- custom resource definition
- custom k8s object
- state tracked by controller

controller
- reconciliation logic
- tracks crd state
- updates resource state

operator
- crd + controller

-- create new operator
$ kubebuilder init  --repo opey -> init basic project structure
$ kubebuilder create api --group my-opey --version v1 --kind Opey -> create crd (go) and controller (go)
$ controller-gen <args> -> create k8s yaml manifest from go definitions
$ go run main.go -> run operator, or run as docker container
$ kubectl apply -f <config/crd/*.yaml> -> apply crd on k8s, verify with kubectl get crd

-- helm charts

1.) Generate crds
$ controller-gen <args> -> generate config/crd/proj.yml manifest based on api/v1/proj_types.go

2.) Resolve values and create basic “template/chart” for each project
- copy values.tpl.yml to proj/values.yml
- copy chart.tpl.yml to proj/chart.yml
- replace tpl values

3.) Manifests and charts per project
$ helm dependency update -> create chart dependencies for project in charts/*.tgz, based on current charts.yml
$ helm template <args> -> create build/proj.yml manifest, k8s native manifest

4.) Build final helm chart, for entire solution (root project)
$ helm dependency update -> create dependencies for bundle chart in charts/*.tgz, based on current charts.yml
$ helm package . -d $buildDir -> create final helm bundled chart to be deployed to k8s, based on charts.yml and /charts/*

5.) Apply helm charts
$ helm upgrade --install <release_name> <chart_name/repo> (or helm install)

-- filter resources
$ kubectl get pods -o json | jq '.items[0].status.initContainerStatuses[] | {image: .image, imageId: .imageID}'
$ kubectl get pods -o json | jq '[.items[].status.initContainerStatuses[]? | {image: .image, imageId: .imageID}]'
$ kubectl get pods -o json | jq '[.items[].status.initContainerStatuses[]? | select(.image == "mydocker/image") | {image: .image, imageId: .imageID}]'